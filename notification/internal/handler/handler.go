package handler

import (
	"encoding/json"
	"log"
)

type NotificationHandler struct {
}

func NewNotificationHandler() *NotificationHandler {
	return &NotificationHandler{}
}

func (h *NotificationHandler) HandleNotification(eventType string, data []byte) {
	switch eventType {
	case "event.created":
		handleEventCreated(data)
	case "registration.created":
		handleRegistrationCreated(data)
	case "review.created":
		handleReviewCreated(data)
	case "registration.deleted":
		handleRegistrationDeleted(data)
	case "review.updated":
		handleReviewUpdated(data)
	case "review.deleted":
		handleReviewDeleted(data)
	default:
		log.Printf("‚ö†Ô∏è unknown event type: %s", eventType)
	}
}

func handleEventCreated(data []byte) {
	var payload struct {
		EventName     string `json:"event_name"`
		EventDate     string `json:"event_date"`
		EventLocation string `json:"event_location"`
		Organizer     string `json:"organizer_name"`
	}
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå Invalid event.created payload: %v", err)
		return
	}

	log.Printf("üì¢ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: %s\nüóì %s\nüìç %s\nüë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: %s",
		payload.EventName, payload.EventDate, payload.EventLocation, payload.Organizer)
}

func handleRegistrationCreated(data []byte) {
	var payload struct {
		UserID    int    `json:"user_id"`
		EventID   int    `json:"event_id"`
		EventName string `json:"event_name"`
	}
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå Invalid registration.created payload: %v", err)
		return
	}

	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ \"%s\" (ID: %d)",
		payload.UserID, payload.EventName, payload.EventID)
}

func handleRegistrationDeleted(data []byte) {
	var payload struct {
		UserID    int    `json:"user_id"`
		EventID   int    `json:"event_id"`
		EventName string `json:"event_name"`
	}
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå Invalid registration.deleted payload: %v", err)
		return
	}

	log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–æ–±—ã—Ç–∏–µ \"%s\" (ID: %d)",
		payload.UserID, payload.EventName, payload.EventID)
}

func handleReviewCreated(data []byte) {
	var payload struct {
		UserID   int    `json:"user_id"`
		EventID  int    `json:"event_id"`
		Rating   int    `json:"rating"`
		Comment  string `json:"comment"`
		UserName string `json:"user_name"`
	}
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå Invalid review.created payload: %v", err)
		return
	}

	log.Printf("üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç %s (ID: %d) –Ω–∞ —Å–æ–±—ã—Ç–∏–µ %d: %d‚≠ê ‚Äî %s",
		payload.UserName, payload.UserID, payload.EventID, payload.Rating, payload.Comment)
}

func handleReviewUpdated(data []byte) {
	var payload struct {
		UserID  int    `json:"user_id"`
		EventID int    `json:"event_id"`
		Rating  int    `json:"rating"`
		Comment string `json:"comment"`
	}
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå Invalid review.updated payload: %v", err)
		return
	}

	log.Printf("üîÑ –û—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞ —Å–æ–±—ã—Ç–∏–µ %d –æ–±–Ω–æ–≤–ª—ë–Ω: %d‚≠ê ‚Äî %s",
		payload.UserID, payload.EventID, payload.Rating, payload.Comment)
}

func handleReviewDeleted(data []byte) {
	var payload struct {
		UserID  int `json:"user_id"`
		EventID int `json:"event_id"`
	}
	if err := json.Unmarshal(data, &payload); err != nil {
		log.Printf("‚ùå Invalid review.deleted payload: %v", err)
		return
	}

	log.Printf("üóë –û—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞ —Å–æ–±—ã—Ç–∏–µ %d —É–¥–∞–ª—ë–Ω", payload.UserID, payload.EventID)
}
